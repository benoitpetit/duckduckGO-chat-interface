import { DuckDuckGoChat, Models } from './index.js';

/**
 * Exemple d'utilisation interactive du package DuckDuckGo Chat Interface
 */
async function interactiveExample() {
  console.log('ü§ñ Exemple d\'utilisation interactive du package DuckDuckGo Chat Interface\n');

  // Cr√©er une nouvelle session avec le mod√®le GPT-4 Mini
  const chat = new DuckDuckGoChat(Models.GPT4Mini);

  try {
    // Initialiser la session
    console.log('üîÑ Initialisation de la session...');
    await chat.initialize();
    console.log('‚úÖ Session initialis√©e avec succ√®s!\n');

    // Exemple 1: Message simple
    console.log('üìù Exemple 1: Envoi d\'un message simple');
    console.log('Question: "Qu\'est-ce que DuckDuckGo ?"');
    const response1 = await chat.sendMessage("Qu'est-ce que DuckDuckGo ?");
    console.log('R√©ponse:', response1.substring(0, 200) + '...\n');

    // Exemple 2: Conversation avec contexte
    console.log('üìù Exemple 2: Conversation avec contexte');
    console.log('Question: "Peux-tu r√©sumer ta r√©ponse pr√©c√©dente en une phrase ?"');
    const response2 = await chat.sendMessage("Peux-tu r√©sumer ta r√©ponse pr√©c√©dente en une phrase ?");
    console.log('R√©ponse:', response2 + '\n');

    // Exemple 3: Streaming
    console.log('üìù Exemple 3: Utilisation du streaming');
    console.log('Question: "Raconte-moi une courte histoire"');
    console.log('R√©ponse en streaming:');
    const response3 = await chat.sendMessageStream(
      "Raconte-moi une tr√®s courte histoire sur un robot",
      (chunk) => {
        process.stdout.write(chunk);
      }
    );
    console.log('\n');

    // Exemple 4: Changement de mod√®le
    console.log('üìù Exemple 4: Changement de mod√®le vers Claude');
    chat.setModel(Models.Claude3);
    const response4 = await chat.sendMessage("Bonjour ! Quel mod√®le d'IA √™tes-vous ?");
    console.log('R√©ponse:', response4.substring(0, 150) + '...\n');

    // Afficher l'historique
    console.log('üìä Historique de la conversation:');
    const history = chat.getHistory();
    history.forEach((msg, index) => {
      console.log(`${index + 1}. [${msg.role}]: ${msg.content.substring(0, 50)}...`);
    });

    // Effacer l'historique
    console.log('\nüóëÔ∏è  Effacement de l\'historique...');
    await chat.clear();
    console.log('‚úÖ Historique effac√©');

    // V√©rifier que l'historique est vide
    const newHistory = chat.getHistory();
    console.log(`üìä Nouveau historique: ${newHistory.length} messages\n`);

    // Afficher les mod√®les disponibles
    console.log('üéØ Mod√®les disponibles:');
    const models = DuckDuckGoChat.getAvailableModels();
    models.forEach(model => console.log(`  - ${model}`));

    console.log('\n‚úÖ Exemple termin√© avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur durant l\'exemple:', error.message);
  }
}

/**
 * Exemple de gestion d'erreurs
 */
async function errorHandlingExample() {
  console.log('\nüõ°Ô∏è  Exemple de gestion d\'erreurs\n');

  const chat = new DuckDuckGoChat();

  try {
    // Tentative d'envoi sans initialisation
    await chat.sendMessage("Test sans initialisation");
  } catch (error) {
    console.log('‚úÖ Erreur g√©r√©e correctement:', error.message);
  }

  try {
    // Initialisation normale
    await chat.initialize();
    console.log('‚úÖ Initialisation r√©ussie apr√®s gestion d\'erreur');
  } catch (error) {
    console.error('‚ùå Erreur d\'initialisation:', error.message);
  }
}

// Ex√©cuter les exemples
async function runExamples() {
  await interactiveExample();
  await errorHandlingExample();
}

runExamples().catch(console.error);
